@inject IProductsService service
@implements IDisposable
@if(service.Products == null || service.Products.Count == 0)
{
    <span>Loading Products...</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in service.Products)
        {
                <li class="media my-3">
                    <div class="media-img-wrapper mr-2">
                        <a href="/Products/@product.Id">
                            <img class="media-img" src="@product.ImageURL" alt="@product.Title">
                        </a>
                    </div>
                    <div class="media-body">
                    <a href="/Products/@product.Id">
                            <h4 class="mb-0">@product.Title</h4>
                        </a>
                        <p>@product.Description</p>
                        <h5 class="price">
                            @GetPriceText(product)
                        </h5>
                    </div>
                </li>
        }
    </ul>
}


@code {
    protected override void OnInitialized()
    {
        service.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        service.ProductsChanged -= StateHasChanged;
    }
    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);

        return $"Starting at ${minPrice}";
    }
}
